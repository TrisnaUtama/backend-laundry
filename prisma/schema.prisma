generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Order_Status {
  pending
  waiting_to_pickup
  on_progress
  process_done
  ready_for_pickup
  awaiting_for_pickup
  pickup_completed
  ready_for_delivery
  out_for_delivery
  delivered
  received
  canceled
}

enum Payment_Status {
  pending
  waiting_for_payment
  paid
  failed
  refunded
}

enum Payment_Method {
  transfer
  cod
}

enum Role {
  Admin
  Staff
  User
}

model User {
  user_id       String    @id @default(cuid())
  name          String
  email         String    @unique
  phone_number  String
  password      String
  is_verified   Boolean?
  status        Boolean   @default(true)
  role          Role?
  created_at    DateTime  @default(now())
  updated_at    DateTime? @updatedAt
  refresh_token String?
  isOnline      Boolean   @default(false)
  orders        Order[]
  otp           OTP[]
  rattings      Ratting[]
  addresses     Address[]
}

model Address {
  user_address_id String    @id @default(cuid())
  user_id         String
  address         String
  is_default      Boolean   @default(false)
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  user            User      @relation(fields: [user_id], references: [user_id])
  orders          Order[]
}

model OTP {
  otp_id      String   @id @default(cuid())
  user_id     String
  otp_code    String
  expiry_time DateTime
  created_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [user_id])
}

model Ratting {
  ratting_id String   @id @default(cuid())
  user_id    String
  order_id   String   @unique
  ratting    Int
  comment    String
  created_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [user_id])
  order      Order    @relation(fields: [order_id], references: [order_id])
}

model Service {
  service_id      String         @id @default(cuid())
  item_type_id    String
  name            String
  description     String
  price           Decimal
  estimated_hours Int
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  detail_orders   Detail_Order[]
  item_type       Item_Type      @relation(fields: [item_type_id], references: [item_type_id])
  Order           Order[]
}

model Item_Type {
  item_type_id String    @id @default(cuid())
  name         String
  created_at   DateTime  @default(now())
  updated_at   DateTime? @updatedAt
  items        Item[]
  services     Service[]
}

model Item {
  item_id       String         @id @default(cuid())
  item_type_id  String
  name          String
  created_at    DateTime       @default(now())
  updated_at    DateTime?      @updatedAt
  detail_orders Detail_Order[]
  item_type     Item_Type      @relation(fields: [item_type_id], references: [item_type_id])
  Order         Order[]
}

model Order {
  order_id            String         @id @default(cuid())
  user_id             String
  address_id          String
  item_id             String
  service_id          String
  status              Order_Status   @default(pending)
  pickup_date         DateTime
  delivery_date       DateTime?
  special_notes       String?
  created_at          DateTime       @default(now())
  updated_at          DateTime?
  cancellation_reason String?
  user                User           @relation(fields: [user_id], references: [user_id])
  address             Address        @relation(fields: [address_id], references: [user_address_id])
  payment             Payment[]
  detail_orders       Detail_Order[]
  ratting             Ratting?
  item                Item           @relation(fields: [item_id], references: [item_id])
  service             Service        @relation(fields: [service_id], references: [service_id])
}

model Detail_Order {
  detail_order_id String    @id @default(cuid())
  order_id        String
  item_id         String
  service_id      String
  weight          Decimal?
  price           Decimal?
  created_at      DateTime  @default(now())
  updated_at      DateTime? @updatedAt
  order           Order     @relation(fields: [order_id], references: [order_id])
  item            Item      @relation(fields: [item_id], references: [item_id])
  service         Service   @relation(fields: [service_id], references: [service_id])
}

model Payment {
  payment_id     String          @id @default(cuid())
  order_id       String
  payment_method Payment_Method?
  total_price    Decimal
  payment_status Payment_Status  @default(pending)
  created_at     DateTime        @default(now())
  updated_at     DateTime?
  order          Order           @relation(fields: [order_id], references: [order_id])
}
